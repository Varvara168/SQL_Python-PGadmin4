import psycopg2
from datetime import date

def connect_db():
    return psycopg2.connect(
        dbname='postgres',
        user='postgres',
        password='1',
        host='localhost',
        port='5432',
    )

def create_tables(cursor):
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(50),
        second_name VARCHAR(50),
        email VARCHAR(100)
    );
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS spendings (
        id SERIAL PRIMARY KEY,
        prise NUMERIC,
        created_at DATE,
        user_id INTEGER REFERENCES users(id)
    );
    """)

def return_id_users(cursor):
    cursor.execute("SELECT id FROM users ORDER BY id DESC LIMIT 1;")
    result = cursor.fetchone()
    if result and result[0] is not None:
        return int(result[0])
    else:
        return 0  # –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏

def add_user(cursor):
    print("üßë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    id = return_id_users(cursor) + 1
    first_name = input("–ò–º—è: ")
    second_name = input("–§–∞–º–∏–ª–∏—è: ")
    email = input("Email: ")
    cursor.execute("""
    INSERT INTO users (id, first_name, second_name, email)
    VALUES (%s, %s, %s, %s);
    """, (id, first_name, second_name, email))
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")

def return_users(cursor):
    cursor.execute("SELECT * FROM users")
    rows = cursor.fetchall()
    if not rows:
        print("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    for i, row in enumerate(rows, start=1):
        try:
            print(f"{i}. {row}")
        except UnicodeDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —Å—Ç—Ä–æ–∫–∏ #{i}:", row)
            print("‚û°Ô∏è –ü—Ä–∏—á–∏–Ω–∞:", e)

def return_id_spendings(cursor):
    cursor.execute("SELECT id FROM spendings ORDER BY id DESC LIMIT 1;")
    result = cursor.fetchone()
    if result and result[0] is not None:
        return int(result[0])
    else:
        return 0  # –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏

def add_spending(cursor):
    print("üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã:")
    try:
        id = return_id_spendings(cursor) + 1
        prise = float(input("–°—É–º–º–∞ —Ç—Ä–∞—Ç—ã: "))
        name = input("–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã: ")
        today = date.today()
        '''from datetime import datetime
        date_str = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î): ")
        try:
            today = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
            return —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã 
        '''
        return_users(cursor)
        user_id = input('–ö–∞–∫–æ–π –≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤–≤–µ–¥–∏—Ç–µ ID): ')
        cursor.execute("""
        INSERT INTO spendings (id, prise, created_at, user_id, name)
        VALUES (%s, %s, %s, %s, %s);
        """, (id, prise, today, user_id, name))
        print("‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except ValueError:
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")

def view_spendings(cursor):
    print("üìÑ –í—Å–µ —Ç—Ä–∞—Ç—ã —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    cursor.execute("""
    SELECT s.id, s.prise, s.created_at, s.name, u.first_name
    FROM spendings s
    JOIN users u ON s.user_id = u.id;
    """)
    rows = cursor.fetchall()
    if rows:
        for row in rows:
            print(f"üßæ –¢—Ä–∞—Ç–∞ #{row[0]} ‚Äî {row[1]}‚ÇΩ –æ—Ç {row[4]} –û–ø–∏—Å–∞–Ω–∏–µ: {row[3]} #({row[2]})")
    else:
        print("‚ùå –¢—Ä–∞—Ç –Ω–µ—Ç.")


def view_spendings_by_user(cursor):
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    
    # –ù–∞–π—Ç–∏ ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º
    cursor.execute("SELECT id, first_name, second_name FROM users WHERE first_name = %s;", (name,))
    users = cursor.fetchall()

    if not users:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–Ω–∏–º –∏–º–µ–Ω–µ–º ‚Äî –ø–æ–∫–∞–∂–µ–º –≤—Å–µ—Ö
    if len(users) > 1:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º:")
        for u in users:
            print(f"ID: {u[0]}, –§–ò–û: {u[1]} {u[2]}")
        user_id = input("–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π ID: ")
    else:
        user_id = users[0][0]

    # –í—ã–≤–æ–¥ —Ç—Ä–∞—Ç –ø–æ user_id
    cursor.execute("""
        SELECT s.id, s.prise, s.created_at
        FROM spendings s
        WHERE s.user_id = %s;
    """, (user_id,))
    spendings = cursor.fetchall()

    if spendings:
        print(f"\nüìÑ –¢—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}:")
        for row in spendings:
            print(f"üßæ –¢—Ä–∞—Ç–∞ #{row[0]} ‚Äî {row[1]}‚ÇΩ ({row[2]})")
    else:
        print("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç—Ä–∞—Ç.")

def delete_user_by_id(cursor):
    try:
        user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: "))

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT * FROM users WHERE id = %s;", (user_id,))
        user = cursor.fetchone()

        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        print(f"üë§ –ù–∞–π–¥–µ–Ω: {user[1]} {user[2]}, email: {user[3]}")
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ —Ç—Ä–∞—Ç—ã? (y/n): ").lower()

        if confirm == "y":
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cursor.execute("DELETE FROM spendings WHERE user_id = %s;", (user_id,))
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("DELETE FROM users WHERE id = %s;", (user_id,))
            print("üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Ç—Ä–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")
        else:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    except ValueError:
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ ID.")

